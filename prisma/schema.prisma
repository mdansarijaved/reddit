generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum useRole {
  USER
  ADMIN
}

model User {
  id                    String                 @id @default(cuid())
  name                  String?
  email                 String?                @unique
  emailVerified         DateTime?
  image                 String?
  password              String?
  role                  useRole                @default(USER)
  accounts              Account[]
  posts                 Posts[]
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
  Likedby               Likedby[]
  Community             Community[]
  Members               Members[]
}

model Account {
  id                String    @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?   @db.Text
  access_token      String?   @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?   @db.Text
  session_state     String?
  likes             Likedby[]

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model Posts {
  id          String     @id @default(cuid())
  title       String
  body        String
  media       String[]
  userId      String
  likes       Likedby[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @default(now())
  User        User       @relation(fields: [userId], references: [id])
  parentId    String?
  parent      Posts?     @relation("PostToPost", fields: [parentId], references: [id])
  children    Posts[]    @relation("PostToPost")
  Community   Community? @relation(fields: [communityId], references: [id])
  communityId String?
}

model Likedby {
  id        String   @id @default(cuid())
  userid    String
  user      User     @relation(fields: [userid], references: [id])
  likedat   DateTime @default(now())
  Posts     Posts?   @relation(fields: [postsId], references: [id])
  postsId   String?
  Account   Account? @relation(fields: [accountId], references: [id])
  accountId String?
}

model Community {
  id             String    @id @default(cuid())
  community_name String
  icon           String
  banner         String
  topics         String[]
  mature         Boolean   @default(false)
  description    String
  posts          Posts[]
  AdminId        String
  user           User      @relation(fields: [AdminId], references: [id])
  members        Members[]
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @default(now())

  @@unique([community_name])
}

model Members {
  id          String     @id @default(cuid())
  memberId    String
  Member      User       @relation(fields: [memberId], references: [id])
  joinedAt    DateTime   @default(now())
  Community   Community? @relation(fields: [communityId], references: [id])
  communityId String?
}
